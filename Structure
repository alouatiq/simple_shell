# Simple Shell Project Structure

This is the structure of the simple shell project, organized by tasks.

## Project Files

- **README.md**  
  - Provides an overview of the project, including setup instructions and usage examples.

- **Makefile**  
  - Automates the compilation process for the shell program.
  - **Task:** General project setup.

- **shell.h**  
  - Main header file containing function prototypes, macros, and global variables.
  - **Task:** General project setup.

## Source Files

### Core Shell Functionality

- **main.c**  
  - Entry point of the shell program; handles mode determination (interactive or non-interactive).
  - **Task:** General project setup, used across multiple tasks.

- **shell_interactive.c**  
  - Manages the shell's interactive mode, displaying the prompt and handling user input.
  - **Task:** Task 1 - Simple Shell 0.1

- **shell_non_interactive.c**  
  - Handles the shell's non-interactive mode, executing commands from a script or file without a prompt.
  - **Task:** Task 16 - File as input

### Command Execution and Parsing

- **execute_command.c**  
  - Parses and executes commands by forking a new process and using `execve`.
  - **Task:** Task 2 - Simple Shell 0.2, Task 3 - Simple Shell 0.3

- **file_input.c**  
  - Handles reading and executing commands from a file in non-interactive mode.
  - **Task:** Task 16 - File as input

- **command_check.c**  
  - Validates and checks if a command exists and is executable.
  - **Task:** Task 3 - Simple Shell 0.3

- **find_command_in_path.c**  
  - Searches for a command in the directories listed in the `PATH` environment variable.
  - **Task:** Task 3 - Simple Shell 0.3

- **command_separator.c**  
  - Handles commands separated by `;` for sequential execution.
  - **Task:** Task 11 - Command separator `;`

- **logical_operators.c**  
  - Implements the handling of logical operators `&&` and `||`.
  - **Task:** Task 12 - Logical operators `&&` and `||`

### Built-in Commands

- **handle_exit.c**  
  - Implements the `exit` built-in command, allowing the shell to terminate.
  - **Task:** Task 4 - Simple Shell 0.4, Task 8 - Simple Shell 0.4.1

- **env.c**  
  - Implements the `env` built-in command to print the current environment variables.
  - **Task:** Task 5 - Simple Shell 1.0

- **setenv_unsetenv.c**  
  - Implements the `setenv` and `unsetenv` built-in commands for environment variable management.
  - **Task:** Task 9 - Setenv, Unsetenv

- **cd.c**  
  - Implements the `cd` built-in command to change the current directory.
  - **Task:** Task 10 - `cd` command

- **alias.c**  
  - Manages aliases with the `alias` built-in command.
  - **Task:** Task 13 - Alias

### Additional Functionality

- **variable_replacement.c**  
  - Handles variable replacement in command strings (e.g., `$?`, `$$`).
  - **Task:** Task 14 - Variables

- **comments.c**  
  - Removes comments from command strings, where `#` denotes a comment.
  - **Task:** Task 15 - Comments

### Utility Functions

- **my_getline.c**  
  - Custom implementation of `getline`, handling line input and EOF.
  - **Task:** Task 6 - Simple Shell 0.1.1

- **my_strtok.c**  
  - Custom implementation of `strtok` for string tokenization.
  - **Task:** Task 7 - Simple Shell 0.2.1

- **free_all.c**  
  - Utility function to free dynamically allocated memory.
  - **Task:** General utility function.

- **important_functions.c**  
  - Contains various utility functions used across the shell.
  - **Task:** General utility function.

### Custom Implementations

- **_printf.c**  
  - Custom implementation of the `printf` function used for formatted output.
  - **Task:** General utility function.

- **_strlen.c**  
  - Implements a function to calculate the length of a string.
  - **Task:** General utility function.
